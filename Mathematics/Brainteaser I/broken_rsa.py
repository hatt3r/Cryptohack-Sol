from Crypto.Util.number import inverse, long_to_bytes

def check_and_strip_padding(decrypted_data):

    if decrypted_data[0:2] == b'\x00\x02':

        padding_start = decrypted_data.find(b'\x00', 2)  
        if padding_start != -1:

            return decrypted_data[padding_start + 1:]
    return None  


def decrypt_rsa(ct, d, n):
    
    return pow(ct, d, n)

def brute_force_rsa(ct, e, n, start_d=0, end_d=100000):
    
    for d in range(start_d, end_d):
        print(f"Trying d = {d}")
        

        decrypted_data = decrypt_rsa(ct, d, n)
        

        decrypted_data_bytes = long_to_bytes(decrypted_data)
        

        message = check_and_strip_padding(decrypted_data_bytes)
        

        if message:
            try:
                decoded_message = message.decode('utf-8')
                if decoded_message.startswith('crypto'):
                    print(f"Flag found: {decoded_message}")
                    return decoded_message
            except UnicodeDecodeError:
                print("Decrypted message is not valid UTF-8.")
    
    print("No flag found in the range.")
    return None

n = 27772857409875257529415990911214211975844307184430241451899407838750503024323367895540981606586709985980003435082116995888017731426634845808624796292507989171497629109450825818587383112280639037484593490692935998202437639626747133650990603333094513531505209954273004473567193235535061942991750932725808679249964667090723480397916715320876867803719301313440005075056481203859010490836599717523664197112053206745235908610484907715210436413015546671034478367679465233737115549451849810421017181842615880836253875862101545582922437858358265964489786463923280312860843031914516061327752183283528015684588796400861331354873
e = 16
ct = 11303174761894431146735697569489134747234975144162172162401674567273034831391936916397234068346115459134602443963604063679379285919302225719050193590179240191429612072131629779948379821039610415099784351073443218911356328815458050694493726951231241096695626477586428880220528001269746547018741237131741255022371957489462380305100634600499204435763201371188769446054925748151987175656677342779043435047048130599123081581036362712208692748034620245590448762406543804069935873123161582756799517226666835316588896306926659321054276507714414876684738121421124177324568084533020088172040422767194971217814466953837590498718


flag = brute_force_rsa(ct, e, n, start_d=0, end_d=100000)


##brute-force the private key d in RSA decryption to retrieve a flag 
# by testing different values and checking for valid padding and the correct flag prefix.
# matching 'crypto{' whether the decrypted message starts with it