N = 78350533167716724210953219297672345109482748116632518530404309165858976494845008683587053100251618594716323140512814495218340961738306206056732465731827376658503474390032479158024323801077218573853501207677310894739719448331655359131676918521750622673770311984363478387260495343161735258914819241211593779169
e = 65537
c =  3046304513759880936413950517154312169987620893082797389052891204437506728632956141886383510872773363428705225749992339341556792620505108679570878142509696615769336067746206146646869990606703092038747492763998220848543731188916430206170112343807871109143445818797060431234639213481752371385004590805294657126


p = 7030665413622188152804326890298899863695664132787135435979811312366683941802150790319593562234408950062934533714076517169236076830573273258964524355030883
q = 73203921674827140191325924914336792930836898405601293082124709327084221350037018076698533470540655590924636559484567282659153197936789246510020363500830871029224947942998075080348647219

phi_N = (p - 1) * (q - 1)

def extended_gcd(a, b):
    if b == 0:
        return a, 1, 0
    g, x1, y1 = extended_gcd(b, a % b)
    x = y1
    y = x1 - (a // b) * y1
    return g, x, y

def mod_inverse(a, m):
    g, x, _ = extended_gcd(a, m)
    if g != 1:
        raise Exception('No modular inverse')
    return x % m

d = 78350533167716724210953219297672345109482748116632518530404309165858976494845008683587053100251618594716323140512814495218340961738306206056732465731827376658503474390032479158024323801077218573853501207677310894739719448331655359131676918521750622673770311984363478387260495343161735258914819241211593779169


m = pow(c, d, N)


print(f"Decrypted message (m): {m}")

## we are given n,e,p,q and c
# we calculate phi
# get the gcd 
# return mod inverse and find m to get the decrypted message